from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium import webdriver
from datetime import date, timedelta
import time

USERNAME = "ithulin"
PASSWORD = "thulin4568"

class DataScraper:
    def __init__(self) -> None:
        self.service = Service(executable_path="/chrome driver")
        self.options = webdriver.ChromeOptions()
        self.options.add_experimental_option("excludeSwitches", ["enable-logging"])
        self.driver = webdriver.Chrome(options=self.options, service=self.service)
        self.today = None
        self.start_date = None
        self.end_date = None
        self.service_tickets = [1057, 2060, 2072, 2083, 2089, 2092, 2093, 2094, 2097, 2098, 2099, 2100, 2101, 2109, 2113, 2114, 2115, 2116, 2121, 2133, 2135, 2137, 2138, 2140, 2143, 2144, 2156, 2163, 2170, 2173, 2174, 2179, 2181, 2182, 2184, 2186, 2187, 2189, 2191, 2192, 2193, 2199, 2201, 2203, 2204, 2205, 2206, 2208, 2211, 2212, 2213, 2215, 2216, 2218, 2221, 2222, 2226 ,2227, 2232, 2233, 2237, 2238, 2240, 2240, 2241,2244, 2246, 2247, 2248, 2249, 2250, 2251, 2253, 2254, 2260, 2262, 2263, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2304, 2305, 2307, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320]

        self.get_date()
        self.set_date_data()

    def get_date(self):
        self.date = date.today()
        #print(self.date)
        self.today = self.date.strftime("%d%m%Y")
        #print(self.today)

    def set_date_data(self):
        self.start_date = self.last_day('saturday')
        self.end_date = self.last_day('sunday')

    def last_day(self, day_name):
        today = date.today()
        days_list = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']
        target_day = days_list.index(day_name)
        delta_day = target_day - today.isoweekday()
        if delta_day >= 0: delta_day -= 7 #go back 7 days
        return (today + timedelta(days=delta_day)).strftime('%d%m%Y')

    def get_sales_efficiency(self):
        
        self.driver.get("https://ge25a.leadperfection.com/")
        time.sleep(3)

        # Login
        self.driver.find_element(By.ID, "txtUserName").send_keys(USERNAME)
        self.driver.find_element(By.ID, "txtPassword").send_keys(PASSWORD)
        self.driver.find_element(By.ID, "btnLogin").click()
        time.sleep(2)

        #self.driver.find_element(By.CLASS_NAME, "menu-toggler").click()
        self.driver.get('https://ge25a.leadperfection.com/ReportCtrl.html?BC=Reports|Report%20Generator')

        # Create group and name drop down
        time.sleep(2)
        self.group_element = self.driver.find_element(By.ID, 'ReportGroup')
        self.name_element = self.driver.find_element(By.ID, "ReportName")
        self.group = Select(self.group_element)
        self.name = Select(self.name_element)

        # Select Sales efficiency by rep
        self.group.select_by_index(6)
        time.sleep(1)
        self.name.select_by_index(11)
        time.sleep(1)

        # Fill in data to pull report for the previous week.
        self.get_date()
        self.driver.find_element(By.ID, 'TextBox1').send_keys(self.start_date)
        time.sleep(1)
        self.driver.find_element(By.ID, 'TextBox2').send_keys(self.end_date)



        # Timer for window to close in case it is left open.
        time.sleep(60)
        print("Time's up")
        self.driver.close()

    def interact_with_ticket(self):
        current_ticket = self.service_tickets[0]

        # Go to production search
        self.driver.get('https://ge25a.leadperfection.com/JobFilters.html?BC=Production|Job%20Search')

         # Enter ticket number
        self.driver.find_element(By.ID, "srch_ticket").send_keys(current_ticket)
        self.driver.find_element(By.ID, "jobSearchButton").click()
        time.sleep(3)

        # Select Service tab
        self.driver.find_element(By.ID, "Service_Tab_Button").click()
        time.sleep(2)

        # Iterate through the services to manually close entry that matches the service ticket number
        ticket_element = self.driver.find_element(By.XPATH, "/html/body/div[1]/div[2]/div/div/div[1]/div/div/div/div/div/div[2]/div/div/div/div/div/div/section/div[2]/div[7]/div/div/table/tbody/tr[1]/td[1]/a/i")
        ticket_element.click()
        time.sleep(2)

        # Set the status tag to complete
        self.status_tag = self.driver.find_element(By.ID, "jsv_svs_id")
        self.status = Select(self.status_tag)
        self.status.select_by_index(4)
        time.sleep(1)

        # Close the popup window
        self.driver.find_element(By.ID, "servicemodalsave").click()
        time.sleep(1)

        # Remove service ticket id from the list
        self.service_tickets.pop(0)

    def remove_service(self):
        
        self.driver.get("https://ge25a.leadperfection.com/")
        time.sleep(3)

        # Login
        self.driver.find_element(By.ID, "txtUserName").send_keys(USERNAME)
        self.driver.find_element(By.ID, "txtPassword").send_keys(PASSWORD)
        self.driver.find_element(By.ID, "btnLogin").click()
        time.sleep(2)

        for i in range(0, len(self.driver.service_tickets)):
            #self.driver.find_element(By.CLASS_NAME, "menu-toggler").click()
            self.driver.get('https://ge25a.leadperfection.com/JobFilters.html?BC=Production|Job%20Search')

            # Iterate through the list of open tickets, call interact_with_ticket, and close the open ticket
            print(self.service_tickets)
            self.interact_with_ticket()

        # Timer for window to close in case it is left open.
        time.sleep(30)
        print("Time's up")
        self.driver.close()

scraper = DataScraper()
#scraper.get_sales_efficiency()
scraper.remove_service()
#scraper.get_date()
#scraper.set_date_data()
#print(scraper.start_date)